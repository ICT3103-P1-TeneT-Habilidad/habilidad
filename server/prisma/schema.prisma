generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
  // previewFeatures = ["transactionApi"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
}

model User {
  userId   String  @id @default(uuid())
  username String @unique
  password String
  name String
  email String @unique
  phoneNumber Int @unique
  deactivationDate DateTime?
  createdOn DateTime @default(now())
  updatedOn DateTime @updatedAt
  role Role
  student Student?
  instructor Instructor?
  moderator Moderator?
  rToken RefreshTokens[]
  oToken OtpToken?
  eToken EmailToken?
  enabled Boolean @default(false)
  @@unique([email, phoneNumber])
}

model Student{
  studentId String @id @default(uuid())
  user   User @relation(fields: [userId], references: [userId])
  userId String
  transaction Transaction[]
  @@unique([userId])
}

model Instructor{
  instructorId String @id @default(uuid())
  user User @relation(fields: [userId], references: [userId])
  userId String
  course Course[]
  @@unique([userId])
}

model Moderator{
  moderatorId String @id @default(uuid())
  user User @relation(fields: [userId], references: [userId])
  userId String
  course Course[]
  @@unique([userId])
}

model Course{
  courseId String @id @default(uuid()) 
  courseName String
  imageUrl String
  imageAssetId String
  imagePublicId String
  duration Int
  isPopular Boolean @default(false)
  price Float
  description String
  language Language
  status CourseStatus
  approvalStatus ApprovedStatus
  createdOn DateTime @default(now())
  updatedOn DateTime @updatedAt
  instructorId String
  approvedBy String?
  moderator Moderator? @relation(fields: [approvedBy], references: [moderatorId], onDelete: Cascade)
  instructor Instructor @relation(fields: [instructorId], references: [instructorId], onDelete: Cascade)
  courseMaterial CourseMaterial[]
  transactions Transaction[]
  topicCourse TopicCourse[]
}

model CourseMaterial {
  courseMaterialId String @id @default(uuid())
  url String
  assetId String
  publicId String
  order Int
  title String
  course Course @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  courseId String
}

model Transaction {
  transactionId String @id @default(uuid())
  amountPaid Float
  createdOn DateTime @default(now())
  student Student @relation(fields: [studentId], references: [studentId])
  studentId String
  course Course @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  courseId String
}

model Topics {
  topicId String @id @default(uuid())
  topicName String @unique
  description String
  url String
  topicCourse TopicCourse[]
}

model TopicCourse{
  topicCourseId String @id @default(uuid())
  course Course @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  courseId String
  topics Topics @relation(fields: [topicId], references: [topicId])
  topicId String
  @@unique([courseId, topicId])
}

model RefreshTokens {
  rTokenId String @id @default(uuid())
  token String @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  revokedAt DateTime?
  expiredAt DateTime
  user User @relation(fields: [userId], references: [userId])
  userId String  
}

model OtpToken {
  oTokenId String @id @default(uuid())
  token String @db.VarChar(6)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiredAt DateTime
  user User @relation(fields: [userId], references: [userId])
  userId String   @unique 
}

model EmailToken {
  eTokenId String @id @default(uuid())
  token String @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiredAt DateTime
  user User @relation(fields: [userId], references: [userId])
  userId String   @unique 
}

enum Role {
  STUDENT
  INSTRUCTOR
  MODERATOR
}

enum Language {
  CHINESE
  ENGLISH
  FRENCH
  INDIAN
  JAPANESE
  KOREAN
  MALAY
  PUNDEK
}

enum ApprovedStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CourseStatus {
  INPROGRESS
  COMPLETED
  STARTED
  TOSTART
}